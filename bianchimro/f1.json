[{"pk": 21, "model": "picture.picture", "fields": {"url": "", "image": "cms_page_media/1/avatar.png", "float": "center", "page_link": 1, "alt": "", "longdesc": ""}}, {"pk": 38, "model": "picture.picture", "fields": {"url": "", "image": "cms_page_media/2012/3/26/openlayers_css_broken_ok.png", "float": null, "page_link": null, "alt": "", "longdesc": ""}}, {"pk": 2, "model": "text.text", "fields": {"body": "<div class=\"well\">\n<h3>Ways to reach me</h3>\nemail: bianchimro@gmail.com<br/>github:\u00a0<a href=\"https://github.com/bianchimro\" target=\"_blank\">bianchimro</a><br/>twitter:\u00a0<a href=\"https://twitter.com/#!/bianchimro\" target=\"_blank\">bianchimro</a> <br/><br/>\n<p>Here is mycurriculum vitae in PDF format (In italian language)\u00a0<img src=\"../../../../../../static/cms/images/file_icons/pdf.gif\" alt=\"File - Curriculum Vitae Mauro Bianchi (ITA)\" id=\"plugin_obj_43\" title=\"File - Curriculum Vitae Mauro Bianchi (ITA)\"/></p>\n</div>"}}, {"pk": 3, "model": "text.text", "fields": {"body": "<p>Some text here</p>"}}, {"pk": 4, "model": "text.text", "fields": {"body": "<p>Other text here</p>"}}, {"pk": 5, "model": "text.text", "fields": {"body": "<p>Text again</p>"}}, {"pk": 6, "model": "text.text", "fields": {"body": "<p>Welcome to my new homepage.</p><p>My new site is based on the fantastic django framework and some more other opensource components.</p>"}}, {"pk": 12, "model": "text.text", "fields": {"body": "<p>This is my new homepage, django-based.</p>\n<p>You can even\u00a0<strong><a href=\"https://github.com/bianchimro/bianchimro-homepage\" class=\"btn-success\" target=\"_blank\"><span class=\"btn\">fork it on github</span></a></strong></p>"}}, {"pk": 13, "model": "text.text", "fields": {"body": "<p>This is my new homepage, django-based.</p>\n<p>You can even\u00a0<strong><a href=\"https://github.com/bianchimro/bianchimro-homepage\" class=\"btn-success\" target=\"_blank\"><span class=\"btn\">fork it on github</span></a></strong></p>"}}, {"pk": 14, "model": "text.text", "fields": {"body": "<p>This is my new homepage based on django, django-cms, twitter bootstrap, django-blog-zinnia, django-imagestore and other reusable django apps.</p>\n<p>I switched to my old Drupal site to a Django one. Drupal is really awesome, but as a Python programmer i simply couldn't resist. <br/>Moreover, lately I've been doing a lot of work with Django, so why spare my skills ? ;)</p>\n<p>One more thing ... If you want to know more about my website you can even ...</p>\n<p><strong><span class=\"btn\"><a href=\"https://github.com/bianchimro/bianchimro-homepage\" target=\"_blank\">check out the source or fork it on github!</a></span></strong></p>\n<div><strong><br/></strong></div>"}}, {"pk": 18, "model": "text.text", "fields": {"body": "<p><span>Mapparia is a web page you can find some data related to air quality in Italy. At this moment, data are available only for region\u00a0</span><strong>Lombardia</strong><span>\u00a0(Italy). It is based on google maps</span></p>"}}, {"pk": 19, "model": "text.text", "fields": {"body": "<h1>Showcase</h1>\n<p>On this page are listed some of my projects</p>"}}, {"pk": 20, "model": "text.text", "fields": {"body": "<h2>Cartoonized</h2>\n<p>An example album. Pics do not match.</p>"}}, {"pk": 22, "model": "text.text", "fields": {"body": "<div class=\"well\">\n<h1>Welcome to my homepage</h1>\n<p><br/>My name is Mauro Bianchi and I live in Bergamo - Italy and this is my personal homepage.</p>\n<p>I am an environmental engineer and software developer. My main professional interests are web developement, environmental modelling, data dissemination and decision support systems.</p>\n<p>All my recent work is based on open source software, in particolar Python and its ecosystem, the Django framework and javascript visualization libraries such as Openlayers and jqplot.</p>\n</div>"}}, {"pk": 23, "model": "text.text", "fields": {"body": "<h1>Gallery</h1>\n<p>As I am a digital photography and visual art enthusiast, I'll post some of my work In this section.<br/>Hopefully this will be a chance to take some new pics!\u00a0</p>"}}, {"pk": 24, "model": "text.text", "fields": {"body": "<h1>Blog</h1>\n<p>The full list of my blog posts.</p>"}}, {"pk": 25, "model": "text.text", "fields": {"body": "<p>Mapparia is a website that displays updated data about air quality in Lombardia (Italy)</p>\n<p class=\"btn\"><a href=\"http://www.mapparia.it\" target=\"_blank\">Go to www.mapparia.it</a></p>"}}, {"pk": 26, "model": "text.text", "fields": {"body": "<p>A website showing the temperature around the world, with data coming from METAR messages broadcast to planes in flight.<br/>Data is shown on a map built with <a href=\"http://openlayers.org/\" target=\"_blank\">Openlayers</a>.\u00a0<br/>There is also an experimental representation of temperatures made with\u00a0<a href=\"http://www.chromeexperiments.com/globe\" target=\"_blank\">WebGL-Globe</a></p>\n<p><strong>This is still a draft and will hopefully be updated soon</strong>.</p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p class=\"btn\"><a href=\"http://www.maurob.org/wwt\" target=\"_blank\">Go to World Wide Temperature</a></p>"}}, {"pk": 28, "model": "text.text", "fields": {"body": "<p>Urban Ecosystem Europe is an environmental data visualization platform I am developing for Ambiente Italia Srl.<br/>The project is aimed at comparing different European cities on a common base of sustainability indicators.<br/>The platform lets you explore the data in different ways, with thematic maps, charts and tabular data visualizations.</p>\n<p>All the project is based on open source packages such as Openlayers, jQuery, jqplot, underscore.js and Twitter Bootstrap.\u00a0</p>\n<p><strong><em>The official web platform is still on a testing phase and will be publicly accessible by the end of April, 2012.</em></strong></p>"}}, {"pk": 29, "model": "text.text", "fields": {"body": "<p>Yesterday I was playing around with <a href=\"http://geodjango.org/\">GeoDjango</a> and I wanted to use the spatialite backend (<strong>django.contrib.gis.db.backends.spatialite</strong>) , but the setup on OSX was not so trivial.\u00a0This method, based on <a href=\"http://mxcl.github.com/homebrew/\">brew</a> is not covered by the GeoDjango documentation about <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/#platform-specific-instructions\">platform-specific instructions</a>.</p>\n<p>I will assume:</p>\n<ul>\n<li>you have already <a href=\"http://mxcl.github.com/homebrew/\">brew</a> installed</li>\n<li>you are working with <a href=\"http://www.virtualenv.org/en/latest/index.html\">virtualenv</a>. If not, I strongly suggest you to do this, when developing with Django and Python in general.</li>\n</ul>\n<p>To make short: sqlite is built in a modular fashion and has the possibility to load up additional modules when it starts. The problem is that the Python sqlite driver shipped with Python on OSX is compiled with a configuration that does not allow such dynamic loading.\u00a0</p>\n<p>Install libspatialite and spatialite-tools with brew:</p>\n<pre>brew update<br/>brew install sqlite<br/>brew install libspatialite<br/>brew install spatialite-tools</pre>\n<p>In order to get rid of extension loading limitation you have to:</p>\n<ul>\n<li>Setup a virtual environment and activate it, for example:</li>\n</ul>\n<pre>virtualenv --no-site-packages env<br/>source env/bin/activate\u00a0</pre>\n<ul>\n<li>Download and decompress pysqlite from Google Code</li>\n</ul>\n<pre>wget http://pysqlite.googlecode.com/files/pysqlite-2.6.3.tar.gz<br/>tar -xzvf pysqlite-2.6.3.tar.gz</pre>\n<ul>\n<li>To allow extension loading you will have to modify pysqlite, recompile and install it.<br/> <strong>Please note\u00a0</strong>that, as you are working in a virtualenv, your system configuration won't be modified.<br/> To do so, edit the file \"setup.cfg\" into the sqlite folder you have just extracted. For example, with vi:</li>\n</ul>\n<pre>cd pysqlite-2.6.3<br/>vi setup.cfg</pre>\n<ul>\n<li>\u00a0Within vi or your favourite text editor, modify the file by commenting the line</li>\n</ul>\n<pre>define=SQLITE_OMIT_LOAD_EXTENSION</pre>\n<p>\u00a0by prepending a \"#\" sign, so after editing the line should look like</p>\n<pre>#define=SQLITE_OMIT_LOAD_EXTENSION</pre>\n<ul>\n<li>Next step is build and install pysqlite. From the same directory where you edited the setup.cfg file, issue the following commands:</li>\n</ul>\n<pre>python setup.py build_static<br/>python setup.py install</pre>\n<p>Now you can complete your GeoDjango setup with spatialite. For a complete description of the process, refer to GeoDjango documentation on <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/#create-spatialite-db\">this page</a> to do so.<br/> For the impatient (assuming your geospatial db is called \"geodjango.db\":</p>\n<pre>touch geodjango.db<br/>spatialite geodjango.db <span class=\"s2\">\"SELECT InitSpatialMetaData();\"</span></pre>\n<p>You should now be ready yo use the\u00a0django.contrib.gis.db.backends.spatialite backend in your django configuration! (remember to add 'django.contrib.gis' to your INSTALLED_APPS).</p>"}}, {"pk": 30, "model": "text.text", "fields": {"body": "<div class=\"well\">\n<p>This page shows one example of <a href=\"http://pypi.python.org/pypi/django-cms-fragments/\">django-cms-fragments</a>.<br/>It's a django-cms plugin that allows injecting fragments of css, js or html in a django-cms page.\u00a0</p>\n<p>You can read more about it or checkout the code on <a href=\"https://github.com/bianchimro/django-cms-fragments\">github</a>\u00a0</p>\n</div>"}}, {"pk": 31, "model": "text.text", "fields": {"body": "<h1>OpenLayers Example</h1>\n<p>The following OpenLayers map has been included using only the admin interface, with django.cms-fragments.</p>"}}, {"pk": 34, "model": "text.text", "fields": {"body": "<p>django-cms-fragments\u00a0is django-cms plugin that allows injecting fragments of css, js or html in a django-cms page.\u00a0<br/>The package is available via pypi and released under BSD license. You can get\u00a0the full code or fork the project on\u00a0<a href=\"https://github.com/bianchimro/django-cms-fragments\">github</a></p>\n<p>You can see a live example on <a href=\"../../../../../../cms-fragments-test/\">this page.</a></p>"}}, {"pk": 35, "model": "text.text", "fields": {"body": "<p>While playing to build some <a href=\"https://github.com/bianchimro/django-cms-fragments\" target=\"_blank\">django-cms-fragments</a> examples, I noticed that OpenLayers conflicts with my theme derived fromTwitter Bootstrap.<br/>If you end up with a strange OpenLayers map like this:\u00a0</p>\n<p><img src=\"../../../../../../../static/cms/images/plugins/image.png\" alt=\"Picture - openlayers_css_broken_ok.png\" id=\"plugin_obj_38\" title=\"Picture - openlayers_css_broken_ok.png\"/></p>\n<p>It's a css issue caused by setting max-width on img tags. In my case, bootstrap was setting</p>\n<pre>img { max-width:100%; }</pre>\n<p>To get rid of it while not\u00a0breaking the whole theme, override the setting just for your map div. For example, given a map div with class=\"map\" the css could be:</p>\n<pre>.map { width:600px; height:400px;}<br/>.map img { max-width:none; }</pre>\n<p>If you don't want to bother css classes, you might also add the inline in the html tag, but I advise to use css for better separation of code, maintenability and mental sanity of an eventual markup reader.</p>"}}, {"pk": 44, "model": "text.text", "fields": {"body": "<p><span>Document on the state of the environment for Agenda 21 (Update for year 2009).</span><br/><span>Developement of a web application http://www.a21calopicos.it/rsa/ for web publishing of RSA data, with webgis functionalities based on Openlayers (javascript) and Google Maps cartographical data.</span></p>\n<p class=\"btn\"><a href=\"http://www.a21calopicos.it/rsa/index.html\">Go to the webrsa</a></p>"}}, {"pk": 45, "model": "text.text", "fields": {"body": "<p>As i am working on a wxPython project, which must run with Python in 32 bit mode, as it relies on the Carbon API.</p>\n<p>A way to run python in such mode is setting an environment variable before calling our interpreter:</p>\n<pre>export VERSIONER_PYTHON_PREFER_32_BIT=yes<br/>python\u00a0</pre>\n<p>to save some typing, I created a bash script that i put on my path, with the following content</p>\n<pre>#!/bin/bash<br/>export VERSIONER_PYTHON_PREFER_32_BIT=yes<br/>python $*</pre>\n<p>Notice the last line that calls python passing all parameters you provide ad shell prompt.</p>"}}, {"pk": 48, "model": "text.text", "fields": {"body": "<p>Today I had to handle a csv file upload with django, parse it with a csv.DictReader and cycle on results.</p>\n<p>I first\u00a0thought this could be easily accomplished with the csv python module, but the task turned itself into a big pain in the a**, due to characters encoding\u00a0and csv dialects Babylon.</p>\n<p>After a bit of googling, I solved the issue thanks to a couple of very nice blog posts and the chardet python module. (http://pypi.python.org/pypi/chardet)</p>\n<p>Here is what i did:</p>\n<pre> \nimport chardet\ndef handle_upload(request)\n\n     #assuming 'uploaded_file' is the file key in request.files\n     f = request.FILES['uploaded_file']\n\n     #guessing file encoding:\n     #http://jazstudios.blogspot.it/2011/11/python-detect-charset-and-convert-to.html\n     content = f.read()\n     \n     encoding = chardet.detect(content)['encoding']\n     if encoding != 'utf-8':\n         content = content.decode(encoding, 'replace').encode('utf-8')\n         \n     filestream = StringIO.StringIO(content)\n     dialect = csv.Sniffer().sniff(content)\n     \n     # handling line terminator with splitlines:            \n     # http://madebyknight.com/handling-csv-uploads-in-django/\n     # csv.DictReader can be initialized with any object supporting the iterator protocol!\n\n     reader = csv.DictReader(filestream.read().splitlines(), dialect=dialect)\n     results = [row for row in reader]\n     \n     # ...\n     # ... do whatever you want with results\n\n\n</pre>\n<p>Probably this is not a bullet-proof solution, but seems to work for me :)</p>"}}, {"pk": 1, "model": "imagestore.album", "fields": {"updated": "2012-03-09 08:18:06", "name": "Cartoonized", "created": "2012-03-09 08:10:27", "head": 1, "user": 2, "is_public": true, "order": 0}}, {"pk": 1, "model": "imagestore.image", "fields": {"album": 1, "updated": "2012-03-09 08:17:48", "description": null, "tags": "", "image": "imagestore/8e9db34d-9fcb-42a1-9cbd-5c199a9e254c.JPG", "title": "", "created": "2012-03-09 08:13:00", "user": null, "order": 0}}, {"pk": 2, "model": "imagestore.image", "fields": {"album": 1, "updated": "2012-03-09 08:18:06", "description": null, "tags": "", "image": "imagestore/07954505-0d13-465f-bcc7-202d399cb965.JPG", "title": "", "created": "2012-03-09 08:18:06", "user": null, "order": 0}}, {"pk": 15, "model": "imagestore_cms.imagestorealbumptr", "fields": {"album": 1}}, {"pk": 39, "model": "cmsplugin_zinnia.latestentriesplugin", "fields": {"subcategories": true, "tags": [], "number_of_entries": 5, "template_to_render": "cmsplugin_zinnia/entry_detail.html", "authors": [], "categories": []}}, {"pk": 41, "model": "cmsplugin_zinnia.categoryentriesplugin", "fields": {"category": 1, "number_of_entries": 5}}]